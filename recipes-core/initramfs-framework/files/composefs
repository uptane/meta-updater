#!/bin/sh
# Copyright (C) 2023 Toradex AG.
# Licensed on MIT

# Enable additions to allow upgrades from legacy to composefs-based storage (OSTree).
CFS_UPGRADE_ENABLE="${CFS_UPGRADE_ENABLE:-@@CFS_UPGRADE_ENABLE@@}"

# Force enabling fsverity (mostly for debugging purposes).
CFS_ALWAYS_ENABLE="${CFS_ALWAYS_ENABLE:-0}"

SYSROOT_DIR="/sysroot"
COMPOSEFS_NAME=".ostree.cfs"
PREPARE_ROOT_CFG="/usr/lib/ostree/prepare-root.conf"

composefs_enabled() {
	return 0
}

composefs_warn() {
	msg "## WARNING: $*"
}

composefs_enable_fsverity_fs() {
	root_dev=$(mount | sed -ne "\#${ROOTFS_DIR}# {s# *\(/dev/[^ ]*\) .*#\1#p}")
	if [ ! -b "${root_dev}" ]; then
		composefs_warn "Could not determine root device!"
		return 1
	fi

	if tune2fs -l "${root_dev}" 2>/dev/null | \
	   grep -q -i 'filesystem features:.*\bverity\b'; then
		info 'Feature "verity" is already enabled on the filesystem.'
	else
		if tune2fs -O verity "${root_dev}"; then
			msg 'Enabling "verity" feature on the filesystem succeeded.'
		else
			composefs_warn 'Enabling "verity" feature on the filesystem FAILED.'
			return 1
		fi
	fi

	return 0
}

# $1: number of currently processed items
# $2: total number of items to process
# $3: (optional) when set to "1", a newline is added at the end
composefs_progress() {
	bar_cur="${1}"
	bar_tot="${2}"
	bar_end="${3}"

	bar_curtm="$(date '+%s')"
	bar_updtm="${bar_updtm:-0}"
	bar_difftm="$((bar_curtm - bar_updtm))"
	if [ "${bar_difftm}" -lt 1 ] && [ "${bar_end}" != "1" ]; then
		# Update only once every second
		return
	fi
	bar_updtm="$(date '+%s')"

	bar_len="50"
	bar_done="$((bar_len * bar_cur / bar_tot))"
	bar_todo="$((bar_len - bar_done))"
	bar_str1="$(printf "%*s" "${bar_done}" '' | tr ' ' '=')"
	bar_str2="$(printf "%*s" "${bar_todo}" '' | tr ' ' '.')"
	bar_str3="$(printf "%d" "${bar_cur}")"
	bar_str4="$(printf "%d" "${bar_tot}")"

	bar_str="$(printf "\rProgress: [%s%s] (%5s/%5s)" "${bar_str1}" "${bar_str2}" "${bar_str3}" "${bar_str4}")"

	msg -n "${bar_str}"
	[ "${bar_end}" = "1" ] && msg ""
}

# We could replace this whole function by:
#
# $ ostree admin post-copy --sysroot="${SYSROOT_DIR}"
#
# However this would bring in the dependency of ostree to the ramdisk
# which doesn't look like a good idea. Instead, here we depend only on
# "findutils" and "fsverity-utils".
#
composefs_enable_fsverity_files() {
	nfiles="$(find "${SYSROOT_DIR}/ostree/repo/objects" -type f | wc -l)"
	count="0"
	tmpf="$(mktemp)"

	# Enable verity on all repository files.
	find "${SYSROOT_DIR}/ostree/repo/objects" -type f | while read -r fname; do
		composefs_progress "${count}" "${nfiles}"
		{ fsverity enable "${fname}" || fsverity measure "${fname}"; } >/dev/null 2>/dev/null
		# shellcheck disable=SC2181
		if [ "$?" -ne 0 ]; then
			echo "ERROR: Could not enable fsverity on '${fname}'." >>"${tmpf}"
		fi
		count=$((count + 1))
	done

	composefs_progress "${nfiles}" "${nfiles}" "1"
	msg ""

	# And also on the composefs file of every deployment.
	for fname in $(ls -1 "${SYSROOT_DIR}/ostree/deploy"/*/deploy/*/"${COMPOSEFS_NAME}" 2>/dev/null); do
		{ fsverity enable "${fname}" || fsverity measure "${fname}"; } >/dev/null 2>/dev/null
		# shellcheck disable=SC2181
		if [ "$?" -ne 0 ]; then
			echo "ERROR: Could not enable fsverity on '${fname}'." >>"${tmpf}"
		fi
	done

	nerrors=$(grep -c 'ERROR:' "${tmpf}")
	if [ "${nerrors}" -ne 0 ]; then
		msg "Could not enable fsverity on ${nerrors} files (out of ${nfiles})."
		return 1
	fi

	return 0
}

composefs_ensure_fsverity() {
	# Do we need fsverity?
	if [ ! -f "${PREPARE_ROOT_CFG}" ]; then
		info "No ${PREPARE_ROOT_CFG} found - assuming fsverity is not needed"
		return 0
	fi

	# Allow setting composefs.enabled config via kernel cmdline;
	# "cfs.enabled" could be set to false|true|signed or any other value accepted
	# by "ostree-prepare-root".
	if [ -n "${bootparam_cfs_enabled}" ]; then
		info "Overriding composefs.enabled: setting to ${bootparam_cfs_enabled}"
		sed -i -e "/^\[composefs\]/,/^\[.*\]/ {s/^enabled[[:space:]]*=.*\$/enabled = ${bootparam_cfs_enabled}/}" "${PREPARE_ROOT_CFG}"
	fi

	# Check configuration key composefs.enabled; this could be set to no|maybe|yes|signed.
	enabled="$(sed -n -e '/^\[composefs\]/,/^\[.*\]/ {s/^enabled[[:space:]]*=[[:space:]]*\([^[:space:]]*\)/\1/p}' "${PREPARE_ROOT_CFG}")"
	enabled="${enabled:-no}"
	debug "composefs.enabled=${enabled}"

	if [ "${enabled}" = "no" ]; then
		info "composefs is not enabled in ${PREPARE_ROOT_CFG}"
		return 0
	fi

	# Enable fsverity at the filesystem level.
	if ! composefs_enable_fsverity_fs; then
		info "Could not enable fsverity on the fs - avoid enabling it on individual files"
		return 1
	fi

	if [ -z "${bootparam_ostree}" ]; then
		info "Parameter ostree= not passed in kernel cmdline"
		return 1
	fi

	# Determine deployment being booted from kernel cmdline:
	deployment="$(realpath -e "${SYSROOT_DIR}${bootparam_ostree}" 2>/dev/null)"
	if [ -z "${deployment}" ]; then
		info "Could not determine current deployment (ostree=${bootparam_ostree})"
		return 1
	fi

	cfsfile="${deployment}/${COMPOSEFS_NAME}"
	lockfile="${SYSROOT_DIR}/ostree/repo/enable-verity.lock"

	if [ ! -f "${cfsfile}" ]; then
		info "File '${cfsfile}' does not exist"
	fi

	# Handle the case where fsverity is partially enabled on the repository; this would normally
	# happen when transitioning from legacy to composefs-backed installations.
	enable_verity_on_upgrade="0"
	if [ "${CFS_UPGRADE_ENABLE}" = "1" ]; then
		# Use the /usr/etc/os-release file to figure out if fsverity is not enabled in some
		# of the deployments.
		osrfiles=$(ls -1 ${SYSROOT_DIR}/ostree/deploy/torizon/deploy/*/usr/etc/os-release 2>/dev/null)
		for fn in ${osrfiles}; do
			if ! fsverity measure "${fn}" >/dev/null 2>/dev/null; then
				enable_verity_on_upgrade="1"
				break
			fi
		done
	fi

	# We want to enable fsverity in any of the following cases:
	#
	# - If the lockfile exists; fsverity enabling operation may have been interrupted.
	# - If fsverity is not enabled on the .cfs file; this would be the case after an OS
	#   installation with e.g. Toradex Easy Installer (or any installer that unpacks a
	#   tarball with the rootfs).
	# - If we are upgrading from a legacy system and composefs is not enabled on some
	#   files (this is optional and enabled by setting CFS_UPGRADE_ENABLE="1").
	#
	if [ -f "${lockfile}" ]; then
		info "Lockfile exists - continue fsverity enabling"
	elif [ -f "${cfsfile}" ] && ! fsverity measure "${cfsfile}" >/dev/null 2>/dev/null; then
		info "File '${cfsfile}' does not have fsverity info - start fsverity enabling"
	elif [ "${enable_verity_on_upgrade}" = "1" ]; then
		info "Some deployment does not have fsverity info - start fsverity enabling"
	elif [ "${CFS_ALWAYS_ENABLE}" = "1" ]; then
		info "CFS_ALWAYS_ENABLE is set - start fsverity enabling"
	else
		info "Enabling fsverity on repository is not needed"
		return 0
	fi

	# Stretch protected by a lockfile.
	# ---
	touch "${lockfile}" || return 1

	msg ""
	msg "Enabling fsverity on the ostree repository - this may take a few minutes."
	msg ""

	t0="$(date '+%s')"
	composefs_enable_fsverity_files
	composefs_enable_status="$?"
	t1="$(date '+%s')"

	# ---
	rm "${lockfile}"

	msg "Enabling fsverity took $((t1 - t0)) seconds."

	if [ "${composefs_enable_status}" -ne 0 ]; then
		# TODO: Consider rebooting or forcing a rollback.
		# TODO: Consider copying the file holding the errors somewhere.
		composefs_warn "Enabling fsverity failed - system may not boot."
		return 1
	fi

	return 0
}

composefs_run() {
	info "Running composefs script..."

	if [ -d "${ROOTFS_DIR}" ]; then
		# When built with composefs support ostree-prepare-root will
		# look for objects under /sysroot which is actually the rootfs
		# directory in the ramdisk.
		ln -sf "${ROOTFS_DIR}" "${SYSROOT_DIR}"
		composefs_ensure_fsverity
	else
		info "No rootfs has been set"
		return 1
	fi
}
